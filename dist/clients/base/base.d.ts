import { type ValidateFunction } from 'ajv';
import { EventEmitter } from 'node:events';
import { type CallbackWithPromise } from '../../apis/callbacks.ts';
import { type API, type Callback } from '../../apis/definitions.ts';
import { type ApiVersionsResponseApi } from '../../apis/metadata/api-versions-v3.ts';
import { type ClientType } from '../../diagnostic.ts';
import { ConnectionPool } from '../../network/connection-pool.ts';
import { type Broker, type Connection } from '../../network/connection.ts';
import { kInstance } from '../../symbols.ts';
import { type Metrics } from '../metrics.ts';
import { type BaseOptions, type ClusterMetadata, type MetadataOptions } from './types.ts';
export declare const kClientId: unique symbol;
export declare const kBootstrapBrokers: unique symbol;
export declare const kApis: unique symbol;
export declare const kGetApi: unique symbol;
export declare const kGetConnection: unique symbol;
export declare const kGetBootstrapConnection: unique symbol;
export declare const kOptions: unique symbol;
export declare const kConnections: unique symbol;
export declare const kFetchConnections: unique symbol;
export declare const kCreateConnectionPool: unique symbol;
export declare const kClosed: unique symbol;
export declare const kClosing: unique symbol;
export declare const kListApis: unique symbol;
export declare const kMetadata: unique symbol;
export declare const kCheckNotClosed: unique symbol;
export declare const kClearMetadata: unique symbol;
export declare const kParseBroker: unique symbol;
export declare const kPerformWithRetry: unique symbol;
export declare const kPerformDeduplicated: unique symbol;
export declare const kValidateOptions: unique symbol;
export declare const kInspect: unique symbol;
export declare const kFormatValidationErrors: unique symbol;
export declare const kPrometheus: unique symbol;
export declare const kClientType: unique symbol;
export declare const kAfterCreate: unique symbol;
export declare class Base<OptionsType extends BaseOptions = BaseOptions> extends EventEmitter {
    #private;
    [kInstance]: number;
    [kClientId]: string;
    [kClientType]: ClientType;
    [kBootstrapBrokers]: Broker[];
    [kApis]: ApiVersionsResponseApi[];
    [kOptions]: OptionsType;
    [kConnections]: ConnectionPool;
    [kClosed]: boolean;
    [kClosing]: boolean;
    [kPrometheus]: Metrics | undefined;
    constructor(options: OptionsType);
    get instanceId(): number;
    get clientId(): string;
    get closed(): boolean;
    get type(): ClientType;
    emitWithDebug(section: string | null, name: string, ...args: any[]): boolean;
    close(callback: CallbackWithPromise<void>): void;
    close(): Promise<void>;
    listApis(callback: CallbackWithPromise<ApiVersionsResponseApi[]>): void;
    listApis(): Promise<ApiVersionsResponseApi[]>;
    metadata(options: MetadataOptions, callback: CallbackWithPromise<ClusterMetadata>): void;
    metadata(options: MetadataOptions): Promise<ClusterMetadata>;
    [kCreateConnectionPool](): ConnectionPool;
    [kListApis](callback: CallbackWithPromise<ApiVersionsResponseApi[]>): void;
    [kMetadata](options: MetadataOptions, callback: CallbackWithPromise<ClusterMetadata>): void;
    [kCheckNotClosed](callback: CallbackWithPromise<any>): boolean;
    [kClearMetadata](): void;
    [kParseBroker](broker: Broker | string): Broker;
    [kPerformWithRetry]<ReturnType>(operationId: string, operation: (callback: Callback<ReturnType>) => void, callback: CallbackWithPromise<ReturnType>, attempt?: number, errors?: Error[], shouldSkipRetry?: (e: Error) => boolean): void | Promise<ReturnType>;
    [kPerformDeduplicated]<ReturnType>(operationId: string, operation: (callback: CallbackWithPromise<ReturnType>) => void, callback: CallbackWithPromise<ReturnType>): void | Promise<ReturnType>;
    [kGetApi]<RequestArguments extends Array<unknown>, ResponseType>(name: string, callback: Callback<API<RequestArguments, ResponseType>>): void;
    [kGetConnection](broker: Broker, callback: Callback<Connection>): void;
    [kGetBootstrapConnection](callback: Callback<Connection>): void;
    [kValidateOptions](target: unknown, validator: ValidateFunction<unknown>, targetName: string, throwOnErrors?: boolean): Error | null;
    [kInspect](...args: unknown[]): void;
    [kFormatValidationErrors](validator: ValidateFunction<unknown>, targetName: string): string;
    [kAfterCreate](type: ClientType): void;
}

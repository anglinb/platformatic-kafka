declare const instanceIdentifier: unique symbol;
export declare class DynamicBuffer {
    #private;
    buffers: Buffer[];
    length: number;
    [instanceIdentifier]: boolean;
    static isDynamicBuffer(target: any): boolean;
    constructor(buffers?: Buffer | Buffer[]);
    get buffer(): Buffer;
    append(buffer: Buffer): this;
    prepend(buffer: Buffer): this;
    appendFrom(DynamicBuffer: DynamicBuffer): this;
    prependFrom(DynamicBuffer: DynamicBuffer): this;
    subarray(start?: number, end?: number): DynamicBuffer;
    slice(start?: number, end?: number): Buffer;
    clone(deep?: boolean): DynamicBuffer;
    consume(offset: number): this;
    toString(encoding?: BufferEncoding, start?: number, end?: number): string;
    get(offset: number): number;
    readUInt8(offset?: number): number;
    readUInt16BE(offset?: number): number;
    readUInt16LE(offset?: number): number;
    readUInt32BE(offset?: number): number;
    readUInt32LE(offset?: number): number;
    readBigUInt64BE(offset?: number): bigint;
    readBigUInt64LE(offset?: number): bigint;
    readUnsignedVarInt(offset: number): [number, number];
    readUnsignedVarInt64(offset: number): [bigint, number];
    readInt8(offset?: number): number;
    readInt16BE(offset?: number): number;
    readInt16LE(offset?: number): number;
    readInt32BE(offset?: number): number;
    readInt32LE(offset?: number): number;
    readBigInt64BE(offset?: number): bigint;
    readBigInt64LE(offset?: number): bigint;
    readVarInt(offset: number): [number, number];
    readVarInt64(offset: number): [bigint, number];
    readFloatBE(offset?: number): number;
    readFloatLE(offset?: number): number;
    readDoubleBE(offset?: number): number;
    readDoubleLE(offset?: number): number;
    writeUInt8(value: number, append?: boolean): this;
    writeUInt16BE(value: number, append?: boolean): this;
    writeUInt16LE(value: number, append?: boolean): this;
    writeUInt32BE(value: number, append?: boolean): this;
    writeUInt32LE(value: number, append?: boolean): this;
    writeBigUInt64BE(value: bigint, append?: boolean): this;
    writeBigUInt64LE(value: bigint, append?: boolean): this;
    writeUnsignedVarInt(value: number, append?: boolean): void;
    writeUnsignedVarInt64(value: bigint, append?: boolean): void;
    writeInt8(value: number, append?: boolean): this;
    writeInt16BE(value: number, append?: boolean): this;
    writeInt16LE(value: number, append?: boolean): this;
    writeInt32BE(value: number, append?: boolean): this;
    writeInt32LE(value: number, append?: boolean): this;
    writeBigInt64BE(value: bigint, append?: boolean): this;
    writeBigInt64LE(value: bigint, append?: boolean): this;
    writeVarInt(value: number, append?: boolean): void;
    writeVarInt64(value: bigint, append?: boolean): void;
    writeFloatBE(value: number, append?: boolean): this;
    writeFloatLE(value: number, append?: boolean): this;
    writeDoubleBE(value: number, append?: boolean): this;
    writeDoubleLE(value: number, append?: boolean): this;
}
export {};

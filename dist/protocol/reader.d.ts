import { DynamicBuffer } from './dynamic-buffer.ts';
import { Writer } from './writer.ts';
export type EntryReader<OutputType> = (reader: Reader, index: number) => OutputType;
declare const instanceIdentifier: unique symbol;
export declare class Reader {
    buffer: DynamicBuffer;
    position: number;
    [instanceIdentifier]: boolean;
    static isReader(target: any): boolean;
    static from(buffer: Buffer | DynamicBuffer | Writer): Reader;
    constructor(buffer: DynamicBuffer);
    reset(buffer?: Buffer | DynamicBuffer): void;
    inspect(): string;
    skip(length: number): this;
    peekUnsignedInt8(): number;
    peekUnsignedInt16(): number;
    peekUnsignedInt32(): number;
    peekUnsignedInt64(): bigint;
    peekUnsignedVarInt(): number;
    peekUnsignedVarInt64(): bigint;
    peekInt8(): number;
    peekInt16(): number;
    peekInt32(): number;
    peekInt64(): bigint;
    peekFloat64(): number;
    peekVarInt(): number;
    peekVarInt64(): bigint;
    peekBoolean(): boolean;
    peekUUID(): string;
    readUnsignedInt8(): number;
    readUnsignedInt16(): number;
    readUnsignedInt32(): number;
    readUnsignedInt64(): bigint;
    readUnsignedVarInt(): number;
    readUnsignedVarInt64(): bigint;
    readInt8(): number;
    readInt16(): number;
    readInt32(): number;
    readInt64(): bigint;
    readFloat64(): number;
    readVarInt(): number;
    readVarInt64(): bigint;
    readBoolean(): boolean;
    readNullableString(compact?: boolean, encoding?: BufferEncoding): string | null;
    readString(compact?: boolean, encoding?: BufferEncoding): string;
    readUUID(): string;
    readNullableBytes(compact?: boolean): Buffer | null;
    readBytes(compact?: boolean): Buffer;
    readVarIntBytes(): Buffer;
    readNullableArray<OutputType>(reader: EntryReader<OutputType>, compact?: boolean, discardTrailingTaggedFields?: boolean): OutputType[] | null;
    readNullableMap<Key, Value>(reader: EntryReader<[Key, Value]>, compact?: boolean, discardTrailingTaggedFields?: boolean): Map<Key, Value> | null;
    readArray<OutputType>(reader: EntryReader<OutputType>, compact?: boolean, discardTrailingTaggedFields?: boolean): OutputType[];
    readMap<Key, Value>(reader: EntryReader<[Key, Value]>, compact?: boolean, discardTrailingTaggedFields?: boolean): Map<Key, Value>;
    readVarIntArray<OutputType>(reader: EntryReader<OutputType>): OutputType[];
    readVarIntMap<Key, Value>(reader: EntryReader<[Key, Value]>): Map<Key, Value>;
    readTaggedFields(): void;
}
export {};
